<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.4.1">Jekyll</generator><link href="https://astrocaribe.github.io//feed.xml" rel="self" type="application/atom+xml" /><link href="https://astrocaribe.github.io//" rel="alternate" type="text/html" /><updated>2017-08-01T17:13:43-05:00</updated><id>https://astrocaribe.github.io//</id><title type="html">What I Typed Today</title><subtitle>What I typed today - This blog is intended to document tidbits of information that I have learned, and continue to learn on my development journey.
</subtitle><entry><title type="html">Unscrewing a Git merge</title><link href="https://astrocaribe.github.io//dev/2017/07/31/git-merge-screwup.html" rel="alternate" type="text/html" title="Unscrewing a Git merge" /><published>2017-07-31T12:00:00-05:00</published><updated>2017-07-31T12:00:00-05:00</updated><id>https://astrocaribe.github.io//dev/2017/07/31/git-merge-screwup</id><content type="html" xml:base="https://astrocaribe.github.io//dev/2017/07/31/git-merge-screwup.html">&lt;p&gt;Yep. I screwed up a git merge today. It started with a sinking feeling that
something wasn’t quite right, and ended with confirmation that “&lt;strong&gt;Yep, I really
did screw that up!&lt;/strong&gt;”.&lt;/p&gt;

&lt;h3 id=&quot;tldr&quot;&gt;TL;DR&lt;/h3&gt;

&lt;p&gt;So how did I fix it? After much reading and rationalizing, it did a simple
thing; I threw away the last commit that included the merge by executing a hard
reset, one commit back:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;  git reset --hard HEAD~1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;A co-worker and I have been working off the &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt; branch of our repo, and I am a
fan of feature branch work. Due to the nature of what we’re doing, I am happy to
let him continue posting work directly to the &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt; branch, while I continue
feature branch work. Now since this is mostly to bolster our Clojure unit tests,
really, it’s not a big deal right now.&lt;/p&gt;

&lt;p&gt;The issue comes when I decide to merge dev work into my branch. How hard can it
be, right? Without thinking, I commit my feature branch changes (&lt;strong&gt;mistake #1&lt;/strong&gt;)
and proceed to merge &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt; into my branch (&lt;strong&gt;mistake #2&lt;/strong&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-shell&quot; data-lang=&quot;shell&quot;&gt;  git checkout dev
  git pull  &lt;span class=&quot;c&quot;&gt;#pull latest changes&lt;/span&gt;
  git checkout feature-branch
  git merge dev&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Welp, git did exactly as I asked, but not what I wanted. The result was broken
unit tests (that I expected), but more importantly, to my detriment, conflicts.
As in merge conflicts. &lt;strong&gt;Mistake #3&lt;/strong&gt; now comes into play here; without taking
the time to understand the errors that the merge conflict resolution caused, I
started wholesale chipping away at the merge blocks that I didn’t think I needed.
What you get at the end of that is a giant mess…&lt;/p&gt;

&lt;h3 id=&quot;processing&quot;&gt;Processing…&lt;/h3&gt;

&lt;p&gt;After a couple of hours trying to fix the conflicts, I give up, and resign to
rewriting my morning’s work; from scratch. The biggest issue of all is that the
initial merge sorted the timeline such that all commit we’re in chronological
order, including a few older ones. My co-worker’s code intwined in a dance with
mine.&lt;/p&gt;

&lt;p&gt;I panicked, because there was no way I could untangle that manually. I stopped,
thought about it for a few minutes, and came up with maybe trying a &lt;code class=&quot;highlighter-rouge&quot;&gt;cherry-pick&lt;/code&gt;
or &lt;code class=&quot;highlighter-rouge&quot;&gt;git rebase&lt;/code&gt; to save me. Then I got desperate enough to try the impossible:
how about blowing away that merge commit itself? Pretend it didn’t happen?&lt;/p&gt;

&lt;h3 id=&quot;the-problem-solver&quot;&gt;The Problem Solver&lt;/h3&gt;

&lt;p&gt;I took a deep breath, copied code from the mangled merge that I knew I would
need “just in case”. And then uttered the magic words (&lt;em&gt;a prayer. What I
muttered, really, was a prayer to The Coding Gods&lt;/em&gt;):&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-unix&quot; data-lang=&quot;unix&quot;&gt;git reset --hard HEAD~1&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The response on my terminal staring back at me? Exactly what I needed! It was as
if my terminal took all my code back to a time machine, hit a temporal
&lt;code class=&quot;highlighter-rouge&quot;&gt;-1 commit&lt;/code&gt; button on my timeline, and took me back to a state where nothing was
amiss; back to a good state from the morning! &lt;strong&gt;HOORAY!!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And the best part? No intertwined code from the &lt;code class=&quot;highlighter-rouge&quot;&gt;dev&lt;/code&gt; branch from my co-worker!
Nothing to unravel; just getting a second chance to do it right this time.&lt;/p&gt;</content><author><name>astrocaribe</name></author><category term="dev" /><category term="git clojure" /><summary type="html">Yep. I screwed up a git merge today. It started with a sinking feeling that something wasn’t quite right, and ended with confirmation that “Yep, I really did screw that up!”.</summary></entry><entry><title type="html">Clojure Threading Macros</title><link href="https://astrocaribe.github.io//dev/2017/07/29/clojure-threading-macros.html" rel="alternate" type="text/html" title="Clojure Threading Macros" /><published>2017-07-29T19:00:00-05:00</published><updated>2017-07-29T19:00:00-05:00</updated><id>https://astrocaribe.github.io//dev/2017/07/29/clojure-threading-macros</id><content type="html" xml:base="https://astrocaribe.github.io//dev/2017/07/29/clojure-threading-macros.html">&lt;p&gt;I’ve been coding Clojure for ~ 8 months, and it’s only been in the few recent
months that some of the concepts are beginning to click. Only after a deed dive
of impressively written code, do some of the nuances begin to emerge.&lt;/p&gt;

&lt;p&gt;One way that I learn about language concepts is often through math (aren’t all
languages, on one level or another, based on math?). So when I came across
Clojure’s threading macros (&lt;a href=&quot;https://clojuredocs.org/clojure.core/-%3E&quot;&gt;thread first&lt;/a&gt; and
&lt;a href=&quot;https://clojuredocs.org/clojure.core/-%3E%3E&quot;&gt;thread last&lt;/a&gt;), I was throw for a loop. But then, it clicked while
trying to rationalize a math problem.&lt;/p&gt;

&lt;p&gt;Consider the following mundane equation:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-math&quot;&gt;  6^2 / 2 + 7 = 25
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;I know, nothing fancy. But what would this look like in Clojure?&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Using the &lt;a href=&quot;https://en.wikipedia.org/wiki/Order_of_operations#Mnemonics&quot;&gt;order of operations&lt;/a&gt;, you should come to &lt;code class=&quot;highlighter-rouge&quot;&gt;25&lt;/code&gt; as
your answer. But from the snippet above, that’s a bit hard to follow. How about
we use a threading macro?&lt;/p&gt;

&lt;h3 id=&quot;thread-first--&quot;&gt;Thread first (-&amp;gt;)&lt;/h3&gt;
&lt;p&gt;Usage: &lt;code class=&quot;highlighter-rouge&quot;&gt;(-&amp;gt; x &amp;amp; forms)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A &lt;a href=&quot;https://clojuredocs.org/clojure.core/-%3E&quot;&gt;thread first&lt;/a&gt; macro essentially places &lt;code class=&quot;highlighter-rouge&quot;&gt;x&lt;/code&gt; as the second item
in the first form, and the results become the second item in the following form,
ad infinitum. Let’s write our previous expression as a thread first macro:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So, the first form is evaluated &lt;code class=&quot;highlighter-rouge&quot;&gt;(* 6 6) = 36&lt;/code&gt;; which then becomes the second
element in the next form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;36&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then finally:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Ain’t that something? Which form is easier to understand? For me, the threading
example is the one that makes me happy! So how is the thread last macro
different from thread first?&lt;/p&gt;

&lt;h3 id=&quot;thread-last--&quot;&gt;Thread last (-»)&lt;/h3&gt;
&lt;p&gt;Usage: &lt;code class=&quot;highlighter-rouge&quot;&gt;(-&amp;gt;&amp;gt; x &amp;amp; forms)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unlike the &lt;code class=&quot;highlighter-rouge&quot;&gt;-&amp;gt;&lt;/code&gt; macro, x is inserted as the last element in the following form,
and so on. So taking our original mundane equation:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
       &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/18&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yes, the math is indeed different! In non-macro form:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-clojure&quot; data-lang=&quot;clojure&quot;&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)))&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
  &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;127&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;/18&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Apply the same logic as we did for the thread first macro, and you should be
able to verify the result we get above.&lt;/p&gt;

&lt;p&gt;The threading macros makes things easier to read, but most importantly, I
finally understand the macros! May sound simplistic, but it got me where I
needed to understand; maybe it can help you too!&lt;/p&gt;</content><author><name>astrocaribe</name></author><category term="dev" /><category term="clojure" /><summary type="html">I’ve been coding Clojure for ~ 8 months, and it’s only been in the few recent months that some of the concepts are beginning to click. Only after a deed dive of impressively written code, do some of the nuances begin to emerge.</summary></entry><entry><title type="html">I Always Forget</title><link href="https://astrocaribe.github.io//blog/2017/07/29/i-always-forget.html" rel="alternate" type="text/html" title="I Always Forget" /><published>2017-07-29T06:00:00-05:00</published><updated>2017-07-29T06:00:00-05:00</updated><id>https://astrocaribe.github.io//blog/2017/07/29/i-always-forget</id><content type="html" xml:base="https://astrocaribe.github.io//blog/2017/07/29/i-always-forget.html">&lt;p&gt;Often times in the fury of the current tasks ahead, I find myself making small
leaps of progress. and as is customary, I forget to document these little
victories for later use.&lt;/p&gt;

&lt;p&gt;This blog, &lt;strong&gt;What I Typed Today&lt;/strong&gt;, is intended to take care of this problem.
It is meant as a way to document the things that I learned, or reasoned about,
so that I no longer have to reply solely on memory (except to know that it is
documented here :)). My hope is that this will help any other developers,
experienced and novice alike. If you have any comments, feel free to
&lt;a href=&quot;mailto:tlcommodore@gmail.com&quot;&gt;drop me a line&lt;/a&gt;!&lt;/p&gt;</content><author><name>astrocaribe</name></author><category term="blog" /><category term="update" /><summary type="html">Often times in the fury of the current tasks ahead, I find myself making small leaps of progress. and as is customary, I forget to document these little victories for later use.</summary></entry></feed>